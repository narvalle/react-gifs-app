{"version":3,"sources":["components/categories/AddCategory.js","helpers/FetchGifs.js","hooks/useFetchGifs.js","components/gifs/GifGridItem.js","components/gifs/GifGrid.js","GifsApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldCategory","type","value","onChange","target","fetchGifs","category","a","url","encodeURI","fetch","response","json","data","map","img","id","title","images","downsized_medium","console","log","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","GifsApp","categories","setCategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAyBeA,EAtBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAWvC,OACE,sBAAMC,SATkB,SAACC,GACzBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAC7CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAXhB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBV,EAAcU,EAAOF,a,+BCgBlDG,EArBA,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACVC,EADU,gDACqCC,UACnDH,GAFc,uEAKSI,MAAMF,GALf,cAKRG,EALQ,gBAMSA,EAASC,OANlB,uBAMNC,EANM,EAMNA,KANM,kBAQPA,EAAKC,KAAI,SAACC,GACf,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,SAZvB,yCAgBdY,QAAQC,IAAR,MAhBc,kBAiBP,IAjBO,0DAAH,sDCqBAC,EAlBM,SAAChB,GAAc,IAAD,EACPd,mBAAS,CACjCqB,KAAM,GACNU,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAejC,OATAC,qBAAU,WACRrB,EAAUC,GAAUqB,MAAK,SAACT,GAAD,OACvBO,EAAS,CACPZ,KAAMK,EACNK,SAAS,SAGZ,CAACjB,IAEGkB,GCDMI,EAdK,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,sBAAKqB,UAAU,yCAAf,UACE,qBAAKC,IAAKtB,EAAKuB,IAAKd,IACpB,4BAAIA,QC2BKe,EA7BC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACEgB,EAAahB,GAAjCY,EADkB,EACxBL,KAAcU,EADU,EACVA,QAEtB,OACE,mCACGA,EACC,qBACEO,IAAI,+DACJC,IAAI,cACJF,UAAU,WAGZ,qCACE,oDAAqBvB,KACrB,qBAAKuB,UAAU,YAAf,SACGX,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eCjBvBiB,EAAU,WAAO,IAAD,EACSzC,mBAAS,IADlB,mBACpB0C,EADoB,KACRC,EADQ,KAG3B,OACE,qCACE,iDACA,cAAC,EAAD,CAAa5C,YAAa4C,IAC1B,uBACA,6BACGD,EAAWpB,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCRxB8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eca7f2af.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategory }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = ({ target }) => setInputValue(target.value);\n  const handleInputSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 0) {\n      setCategory((oldCategory) => [inputValue, ...oldCategory]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleInputSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const fetchGifs = async (category) => {\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=5&api_key=RY4w2wcrqVDgMTc2L8eLe8WYp7n1M7rm`;\n  try {\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    return data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nexport default fetchGifs;\n","import { useState, useEffect } from \"react\";\nimport fetchGifs from \"../helpers/FetchGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    fetchGifs(category).then((images) =>\n      setState({\n        data: images,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useFetchGifs from \"../../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      {loading ? (\n        <img\n          src=\"https://miro.medium.com/max/441/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\"\n          alt=\"gif_loading\"\n          className=\"center\"\n        />\n      ) : (\n        <>\n          <h3>{`Result from: ${category}`}</h3>\n          <div className=\"card-grid\">\n            {images.map((img) => (\n              <GifGridItem key={img.id} {...img} />\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/categories/AddCategory\";\nimport GifGrid from \"./components/gifs/GifGrid\";\n\nexport const GifsApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>Gifs Expert App</h2>\n      <AddCategory setCategory={setCategories} />\n      <br />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifsApp } from \"./GifsApp\";\nimport \"animate.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifsApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}